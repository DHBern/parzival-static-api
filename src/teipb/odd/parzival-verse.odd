<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Parzival Verse</title>
                <title type="short">pz-verse</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl/>
        </encodingDesc>
        <revisionDesc>
            <change when="2024-09-02Z">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="parzival-verse" source="parzival.odd"> <elementSpec ident="l" mode="change">
                    <model behaviour="block" cssClass="line" useSourceRendition="true">
            <param name="id" value="substring-after(if (@xml:id) then @xml:id else @n, if (@xml:id) then '_' else ' ')"/>
            <param name="content" value="."/>
            <param name="verse" value="let $verse := substring-after(if (@xml:id) then @xml:id else @n, if (@xml:id) then '_' else ' ') let $afterDot := substring-after($verse, '.') let $beforeDash := if (contains($afterDot, '-')) then substring-before($afterDot, '-') else $afterDot  return concat(     substring-before($verse, '.'), '.',     number($beforeDash) )"/>
            <param name="afterDash" value="let $afterDot := substring-after(substring-after(if (@xml:id) then @xml:id else @n, if (@xml:id) then '_' else ' '), '.') return if (contains($afterDot, '-')) then substring-after($afterDot, '-') else ''"/>
            <pb:template xmlns="" xml:space="preserve"><span class="verse" data-verse="[[id]]">[[verse]]<sup>[[afterDash]]</sup></span><span class="content">[[content]]</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="cb" mode="change">
                    <model behaviour="block">
            <param name="label" value="let $id := @xml:id let $match := replace($id, '^([a-zA-Z]+\d*)(\d{3})([rv]?)([a-z])$', '$1|$2|$3|$4') let $parts := tokenize($match, '\|') return concat(   if ($parts[3] = 'r' or $parts[3] = 'v') then 'Bl. ' else 'S. ',   number($parts[2]),   $parts[3],   ', Spalte ',   $parts[4] )"/>
            <pb:template xmlns="" xml:space="preserve"><p>[[label]]</p></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="unclear" mode="change"/>
            </schemaSpec>
        </body>
    </text>
</TEI>